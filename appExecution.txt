----------------------------------
| Ganache GUI Execution Commands |
----------------------------------
    0 ) Open PowerShell
    1 ) Open Ganache GUI Desktop Application
    2.a) cd app --> Dins la carpeta de la Dapp
    2 ) truffle migrate --reset  --> En aquest pas ja veurem els primers blocs creats

    3.a) Open a new PowerShell
    3.b) Install Little Server Dependencies --> npm install --save set-default-browser
    3 ) Execute Little Server --> npm run dev


-----------------
| Geth Commands |
-----------------

    ---------------------------
    | Geth Start a Blockchain |
    ---------------------------

        1 ) Creació d'una compte, amb la que posteriorment treballarem a la xarxa ( /network )
            geth --datadir=./pblkchain account new

        1.a) Posar l'adreça de la compte creada al fitxer genesis.json per tal de que aquesta tingui saldo per poder delpoyar dins la xarxa
            "alloc": {
                "yourAddress" : {"balance" : "1000000000000000000"}
            }

        2 ) Inicialització de la Blockchain ( /network )
            geth --datadir pblkchain init genesis.json

        3 ) Aixequem una xarxa privada d'Ethereum i la posem en funcionament ( /network )
            geth --port 3000 --networkid 9354 --nodiscover --datadir=./pblkchain --maxpeers=0  --rpc --rpcport 8543 --rpcaddr 127.0.0.1 --rpccorsdomain "*" --rpcapi "db,eth,net,web3,personal,miner"
            
            geth --port 3000 --networkid 9354 --nodiscover --datadir=./pblkchain --maxpeers=0  --rpc --rpcport 8543 --rpcaddr 127.0.0.1 --rpccorsdomain "*" --rpcapi "eth,net,web3,personal,miner" js mining.js --unlock da7e565f43edeea1a7fac8655f6a89a5d86a19d2

        4) Obertura d'una Geth Javascript console. Aquesta ens permetrà conectar-nos a la xarxa blockchain privada Ethereum localitzat a localhost:8543 (No es necessita directory especific)
            geth attach http://127.0.0.1:8543

        4-) Creació d'una compte dins la xarxa (inside console)

            personal.newAccount()

            web3.eth.accounts
            personal.listAccounts

            web3.eth.getBalance(web3.eth.accounts[0])
            web3.fromWei(eth.getBalance(web3.eth.accounts[0]), "ether")
            web3.fromWei(eth.getBalance(eth.coinbase), "ether")

            eth.coinbase

            miner.start()

            // Get the instance of the smart contract deployed
                Election.deployed().then(function(i){app = i;})



   
    -----------------------------------------
    | Steps to Add new Peers to the Network |
    -----------------------------------------




    -------------------------
    | Application Execution |
    -------------------------

        T1 --> Executing geth (/network)
                geth --port 3000 --networkid 9354 --nodiscover --datadir=./pblkchain --maxpeers=0  --rpc --rpcport 8543 --rpcaddr 127.0.0.1 --rpccorsdomain "*" --rpcapi "eth,net,web3,personal,miner" js mining.js --unlock 8ef3b17dfd837ba9db963cb4aec03385cb58d366
            [1] geth --port 3000 --networkid 9354 --nodiscover --datadir=./pblkchain --maxpeers=0  --rpc --rpcport 8543 --rpcaddr 127.0.0.1 --rpccorsdomain "*" --rpcapi "eth,net,web3,personal,miner" js mining.js
        
        T2 --> Attach
            [2] geth attach http://127.0.0.1:8543
            [3] personal.unlockAccount(eth.accounts[0])
            geth --preload "mining.js" attach http://127.0.0.1:8543

            (inside console)
            miner.start()

        T3 --> APP / Truffle (/app)
            [4] truffle compile 

            truffle migrate --reset
            [5] sudo truffle migrate --reset --compile-all --network development
            (descarregar dependencies Little Sever --> npm install --save set-default-browser )
            [6] npm run dev 


        Get the instance of the deployed contract
            personal.unlockAccount(eth.accounts[0])
            //https://codebeautify.org/jsonviewer per deixar el json mes petit
            var abiArray = [{"constant":true,"inputs":[],"name":"candidatesCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function","signature":"0x2d35a8a2"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"candidates","outputs":[{"name":"id","type":"uint256"},{"name":"name","type":"string"},{"name":"voteCount","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function","signature":"0x3477ee2e"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"voters","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function","signature":"0xa3ec138d"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor","signature":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_candidateId","type":"uint256"}],"name":"votedEvent","type":"event","signature":"0xfff3c900d938d21d0990d786e819f29b8d05c1ef587b462b939609625b684b16"},{"constant":false,"inputs":[{"name":"_candidateId","type":"uint256"}],"name":"vote","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"0x0121b93f"}]
            var contractAddress = "0xC236a0F2f09580b68780e34a81639205d8FC59ff"
            var electionContract = web3.eth.contract(abiArray)
            var electionInstance = electionContract.at(contractAddress)
            electionInstance.candidates(1)
            personal.unlockAccount(eth.accounts[0])


        Interact with the contract
            electionInstance.vote(1,{from: web3.eth.accounts[0] })
            electionInstance.candidates(1)

        

    ----------------------------------
    | Multinode Blockchain computing |
    ----------------------------------

        [T1] (/network)
        0 ) Creació d'una compte 
            geth --datadir=./pblkchain account new

        1 ) Start a Blockchain step (Inicialització de l'estuctura de dades amb el bloc genesis) (/network)
            geth --datadir pblkchain init genesis.json

        2 ) Connexió a la xarxa del bloc genesis inicializat anteriorment (/network)
            geth --datadir=./pblkchain --networkid 9354 --nodiscover console --rpc --rpcport "8000" --rpcaddr "0.0.0.0" --rpccorsdomain "*" --rpcapi "eth,net,web3,miner,debug,personal,rpc" js mining.js

        3 ) Establiment de la connexió amb altres nodes (/network)
            admin.nodeInfo
            admin.addPeer("InfoAltreNode@IPAltreNode:PortAltreNode")
            Exemple: admin.addPeer("enode://5932c817f205c3c02329dec6fbcc975a4a1246c543c43d7e37a06d9ad6cfe38b7e0d8fb4581dbabb697b3c70ddbd960ca5e4c846debd312fcbbc772827dccda0@10.0.2.254:30303?discport=0")
            
            admin.addPeer("enode://604428c49e8aa5589693868c93674099bb69764c4abe577d48dd3fb1a10fe71d37211f9f1ce7bc1468185318d3236033b11be8510519ca8b9261f318359369ba@10.0.1.66:30303?discport=0")
            

            //Posa la informació dels altres nodes amb els que ens volem conectar (Important canviar la IP, per la IP dins la nostre xarxa privada EX: 192.168.3.211)
            admin.peers
        
        [T2]
        4 ) geth attach http://0.0.0.0:8000
        5 ) Unlock account 
                personal.unlockAccount(eth.accounts[0])


        [T3] (/app)
        6 ) Deploy del smart contract des d'un dels nodes
            sudo truffle migrate --reset --compile-all --network internalMultiNode

        [T1]
        7 ) miner.start() des d'algun node --> Els altres nodes conectats entre si, haurien de començar a importar blocs a l'hora.
            Entre ells hauria d'estar el block on esta el nostre smart contract

        //Al cap d'un rato    
        8 ) miner.stop()
        
        9 ) Obtenir la instancia d'un Smart Contract ja deployat a la Blockchain
            //Creacio de les variables

            //https://codebeautify.org/jsonviewer per deixar el json mes petit
            //Extreure el ABI del Election.json
            var abiArray = [{"constant":true,"inputs":[],"name":"candidatesCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function","signature":"0x2d35a8a2"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"candidates","outputs":[{"name":"id","type":"uint256"},{"name":"name","type":"string"},{"name":"voteCount","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function","signature":"0x3477ee2e"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"voters","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function","signature":"0xa3ec138d"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor","signature":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_candidateId","type":"uint256"}],"name":"votedEvent","type":"event","signature":"0xfff3c900d938d21d0990d786e819f29b8d05c1ef587b462b939609625b684b16"},{"constant":false,"inputs":[{"name":"_candidateId","type":"uint256"}],"name":"vote","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"0x0121b93f"}]
            
            var contractAddress = "0xC236a0F2f09580b68780e34a81639205d8FC59ff"

            // Creacio de la instancia. 1) Agafar el ByteCode 2) Agafar la instancia amb l'Address inscerida 
            var electionContract = web3.eth.contract(abiArray)
            var electionInstance = electionContract.at(contractAddress)

            //Votacio
            electionInstance.vote( 1, {from: eth.accounts[0] })

        [T3]
        10 ) Aixecar la webAPP (/app)
            npm run dev